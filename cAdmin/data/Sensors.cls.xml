<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="cAdmin.data.Sensors">
<Super>%RegisteredObject</Super>
<TimeCreated>63242,50305.449154</TimeCreated>

<Property name="Sensors">
<Type>SYS.Monitor.SystemSensors</Type>
<Private>1</Private>
</Property>

<Property name="CPU">
<Type>%Integer</Type>
</Property>

<Property name="RandomNumber">
<Type>%Integer</Type>
</Property>

<Property name="LockTable">
<Type>%Numeric</Type>
</Property>

<Property name="CSPGatewayLatency">
<Type>%Numeric</Type>
</Property>

<Property name="SMH">
<Type>%Integer</Type>
</Property>

<Property name="Increment">
<Type>%Integer</Type>
</Property>

<Property name="JournalSpace">
<Type>%Numeric</Type>
</Property>

<Property name="Uptime">
<Type>%String</Type>
</Property>

<Property name="LicenseStatus">
<Type>%String</Type>
</Property>

<Property name="LicenseExpirationDate">
<Type>%String</Type>
</Property>

<Property name="LicenseInvalidReason">
<Type>%String</Type>
</Property>

<Method name="RandomNumberGet">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[   	quit $RANDOM(100)
]]></Implementation>
</Method>

<Method name="CPUGet">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	do ..Sensors.GetCPU()	
   	Quit ..Sensors.SensorReading("CPUusage")
]]></Implementation>
</Method>

<Method name="LockTableGet">
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
	do ..Sensors.GetLockTable()	
   	quit ..Sensors.SensorReading("LockTablePercentFull")
]]></Implementation>
</Method>

<Method name="CSPGatewayLatencyGet">
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
	do ..Sensors.GetCSPGateway()	
   	quit ..Sensors.SensorReading("CSPGatewayLatency",$o(..Sensors.SensorReading("CSPGatewayLatency","")))
]]></Implementation>
</Method>

<Method name="SMHGet">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	do ..Sensors.GetSMH()
	quit ..Sensors.SensorReading("SMHPercentFull")
]]></Implementation>
</Method>

<Method name="IncrementGet">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
   	set ^test("HDD")=($g(^test("HDD"),"50")+$RANDOM(4)) # 100
   	quit $g(^test("HDD"),"50")
]]></Implementation>
</Method>

<Method name="JournalSpaceGet">
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
	do ..Sensors.GetJournalSpace()	
   	Quit ..Sensors.SensorReading("JournalSpace")
]]></Implementation>
</Method>

<Method name="UptimeGet">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..Sensors.SystemTime
]]></Implementation>
</Method>

<Method name="LicenseStatusGet">
<Description>
Valid, Invalid, or Troubled (expiring). </Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(%SYSTEM.License).GetKeyStatus()
]]></Implementation>
</Method>

<Method name="LicenseExpirationDateGet">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $zdate($SYSTEM.License.KeyExpirationDate())
]]></Implementation>
</Method>

<Method name="LicenseInvalidReasonGet">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $SYSTEM.License.GetKeyInvalidReason()
]]></Implementation>
</Method>

<Method name="DBStats">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	do ..Sensors.GetDBStats()
	set DBs=##class(cAdmin.data.Databases).%New()
	set DBPath=$o(..Sensors.DBStats(""))
	while DBPath'="" {
		set DB=##class(cAdmin.data.Database).%New()
		set DB.Path=DBPath
		set DB.DirectorySpace=..Sensors.SensorReading("DirectorySpace",DBPath)
		set DB.DBWrites=..Sensors.SensorReading("DBWrites",DBPath)
		set DB.DBReads=..Sensors.SensorReading("DBReads",DBPath)
		set DB.DBLatency=..Sensors.SensorReading("DBLatency",DBPath)
		set DB.DBStats=..Sensors.DBStats(DBPath)
	
		do DBs.Databases.Insert(DB)
		set DBPath=$o(..Sensors.DBStats(DBPath))
	}
	quit ##class(%ZEN.Auxiliary.jsonProvider).%WriteJSONFromObject(,DBs,,,,"aeloqtuw")
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%New</METHOD> method to 
provide notification that a new instance of an object is being created.

<P>If this method returns an error then the object will not be created.
<p>It is passed the arguments provided in the %New call.
When customizing this method, override the arguments with whatever variables and types you expect to receive from %New().
For example, if you're going to call %New, passing 2 arguments, %OnNew's signature could be:
<p>Method %OnNew(dob as %Date = "", name as %Name = "") as %Status
If instead of returning a %Status code this returns an oref and this oref is a subclass of the current
class then this oref will be the one returned to the caller of %New method.]]></Description>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	try	{
		if ('..Sensors) { 
			set ..Sensors=##class(SYS.Monitor.SystemSensors).%New()
			do ..Sensors.GetSensors()
		}
	} catch ex {
	}
	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
