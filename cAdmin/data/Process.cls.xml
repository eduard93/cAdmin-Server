<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="cAdmin.data.Process">
<Description>
This class encapsulates all operations with processes.</Description>
<Super>%RegisteredObject</Super>
<TimeCreated>63239,51725.448373</TimeCreated>

<Method name="ListProcess">
<Description>
Returns a list of all processes in JSON format</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s i=1	
	set JSON = "{"
	set JSON = JSON _ """processes"":["
	while (##class(%SYS.ProcessQuery).NextProcess(i)) 
	{
		set i  = ##class(%SYS.ProcessQuery).NextProcess(i) 
		set JSON = JSON _  "{""id"":"""_i 
		s t=##CLASS(%SYS.ProcessQuery).Open(i) 
		set JSON = JSON _  """,""routine"":"""_t.Routine_"""}"
		set:##class(%SYS.ProcessQuery).NextProcess(i) JSON= JSON _  ","
	}
	set JSON = JSON _  "]}"
	
	q JSON
]]></Implementation>
</Method>

<Method name="KillProcess">
<Description><![CDATA[
Terminate a process.<br>
Kills a process by sending it a halt messages.<br>
<b>id</b> - id of a process.<br>
If SendError is 1 the killed job will send <RESJOB> error and logged in ^%ETN. <br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id,withError=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	zn "%SYS"
	set process = ##class(SYS.Process).Open(id)
	if '($get(process)) q $$$ERROR($lb("404","No such a process "_id))
	if ($get(process).CanBeTerminated) 
	{
		d process.Terminate(withError)
	}
	q $$$OK
]]></Implementation>
</Method>

<Method name="SuspendProcess">
<Description><![CDATA[
Pauses the process.<br>
Put a process into a wait state so it stops executing code.<br>
<b>id</b> - id of a process.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	zn "%SYS"
	set process = ##class(SYS.Process).Open(id)
	if '($get(process)) q $$$ERROR(404,"No such a process: "_id)
	if ($get(process).CanBeSuspended) 
	{
		d process.Suspend()
	}
	q $$$OK
]]></Implementation>
</Method>

<Method name="ResumeProcess">
<Description><![CDATA[
Resume a process.<br>
Resumes a process after it had previously been suspended.<br> 
<b>id</b> - id of a process.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	zn "%SYS"
	set process = ##class(SYS.Process).Open(id)
	if '($get(process)) q $$$ERROR($lb("404","No such a process "_id))
	if ($get(process)) 
	{
		d process.Resume()
	}
	q $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
