<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="cAdmin.data.CconsoleLog">
<Super>%Persistent</Super>
<TimeCreated>63243,34907.371349</TimeCreated>

<Property name="DateTime">
<Type>%TimeStamp</Type>
</Property>

<Property name="Pid">
<Type>%Integer</Type>
</Property>

<Property name="Severity">
<Description>
0 (Information), 1 (Warning), 2 (Severe), 3 (Fatal)</Description>
<Type>%Integer</Type>
</Property>

<Property name="Message">
<Type>%Text</Type>
<Parameter name="LANGUAGECLASS" value="%Text.English"/>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Index name="MessageIndex">
<Type>bitmap</Type>
<Properties>Message(KEYS)</Properties>
</Index>

<Index name="DateTimeIndex">
<Properties>DateTime</Properties>
</Index>

<Index name="ProcessIndex">
<Properties>Pid</Properties>
</Index>

<Index name="SeverityIndex">
<Properties>Severity</Properties>
</Index>

<UDLText name="T">
<Content><![CDATA[
// do ##class(%SYS.System).WriteToConsoleLog("msg","0","1")

]]></Content>
</UDLText>

<Method name="Path">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[		quit ##class(%SYSTEM.Config).ModifyConsoleFile()
]]></Implementation>
</Method>

<Method name="Parse">
<Description>
do ##class(cAdmin.data.CconsoleLog).Parse()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set file=##class(%File).%New(..Path())
	Do file.Open("R")
	while 'file.AtEnd
	{					
			do ..AddEntry(file.ReadLine())
	}
]]></Implementation>
</Method>

<Method name="Update">
<Description>
do ##class(cAdmin.data.CconsoleLog).Update()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set lastdate = $g(^cAdmin("LastDate"),"1")
	Set lasttime = $g(^cAdmin("LastTime"),"0.001")
	Set file = ##class(%File).%New(..Path())
	Do file.Open("R")
	while 'file.AtEnd
	{
		set line = file.ReadLine()
		set date = $p(line,"-",1)
		try {
			set dateh = $zdh(date,,,6)
		} catch ex {
			CONTINUE
		}
		
		CONTINUE:(dateh < lastdate)
		if dateh = lastdate {
			set line = $p(line,"-",2,*)
			set time = $p(line," ",1)
			set timeodbc = $REVERSE($REPLACE($REVERSE(time),":",".",,1))
			try {
				set timeh = $zth(timeodbc)
			} catch ex {
				CONTINUE
			}
					
			CONTINUE:(timeh < lasttime)
			if (timeh = lasttime) 
			{
				set lastdatetime = $zd(lastdate,3)_" "_$zt(lasttime,1)
				set message=""
				&sql(select Message into :message from cAdmin_data.CconsoleLog where DateTime = {ts :lastdatetime})
				CONTINUE:(message = $p(line," ",4,*)) //if messages are equal, skip
			}				
		}	
		do ..AddEntry(line)
		while 'file.AtEnd
		{
			do ..AddEntry(file.ReadLine())
		}
	}
]]></Implementation>
</Method>

<Method name="AddEntry">
<ClassMethod>1</ClassMethod>
<FormalSpec>line:%String</FormalSpec>
<Implementation><![CDATA[
	try {
									//dd/mm/yy-hh:mm:ss:fff (pid) severity message
		set date = $p(line,"-",1)	//dd/mm/yy
		set dateh = $zdh(date,,,6)  // internal format
		set dateodbc = $zd(dateh,3)	//yyyy-mm-dd

		set line= $p(line,"-",2,*)	//hh:mm:ss:fff (pid) severity message
			
		set time = $p(line," ",1)	//hh:mm:ss:fff
		set timeodbc = $REVERSE($REPLACE($REVERSE(time),":",".",,1)) //hh:mm:ss.fff
			
		set line = $p(line," ",2,*)				//(pid) severity message
			
		set pid = $p(line," ",1)				//(pid)
		
		set entry = ..%New()
		set entry.DateTime = dateodbc_" "_timeodbc
		set entry.Pid = $ZSTRIP(pid,"*E'N")		//pid
		set entry.Severity = $p(line," ",2)		//severity
		set entry.Message = $p(line," ",3,*)	//message
		do entry.%Save()
		set ^cAdmin("LastDate")=dateh
		set ^cAdmin("LastTime")=$zth(timeodbc)
	} catch ex {
			// Not all strings contain messages
			// do nothing
	}
]]></Implementation>
</Method>

<Method name="FullTextSearch">
<ClassMethod>1</ClassMethod>
<FormalSpec>query:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set SQL = "SELECT * FROM cAdmin_data.CconsoleLog WHERE message %CONTAINS ("_query_")"
	quit ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,SQL)
]]></Implementation>
</Method>

<Method name="SendLast">
<ClassMethod>1</ClassMethod>
<FormalSpec>num:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set SQL = "SELECT TOP "_num_" * FROM cAdmin_data.CconsoleLog ORDER BY id desc"
	quit ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,SQL)
]]></Implementation>
</Method>

<Method name="DateTimeSearch">
<ClassMethod>1</ClassMethod>
<FormalSpec>query:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if $p(query,",",1)'=""	{
		set startdatetime = $p(query,",",1)
	} else {
		set startdatetime = "1900-01-01 00:00:00.000"
	}
		
	if $p(query,",",2)'=""	{
		set enddatetime = $p(query,",",2)
	} else {
		set enddatetime = "2199-12-12 23:59:59.999"
	}
		
	set SQL = 	"SELECT * FROM cAdmin_data.CconsoleLog WHERE "_
				"DateTime BETWEEN {ts '"_startdatetime_"'} AND "_
				" {ts '"_enddatetime_"'}" 
	quit ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,SQL)
]]></Implementation>
</Method>

<Method name="GetLastId">
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	&sql(select top 1 id into :lastid from cAdmin_data.CconsoleLog order by id desc)
	quit lastid
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^cAdmin.data.CconsoleLogD</DataLocation>
<DefaultData>CconsoleLogDefaultData</DefaultData>
<IdLocation>^cAdmin.data.CconsoleLogD</IdLocation>
<IndexLocation>^cAdmin.data.CconsoleLogI</IndexLocation>
<StreamLocation>^cAdmin.data.CconsoleLogS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="CconsoleLogDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DateTime</Value>
</Value>
<Value name="3">
<Value>Pid</Value>
</Value>
<Value name="4">
<Value>Severity</Value>
</Value>
<Value name="5">
<Value>Message</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
