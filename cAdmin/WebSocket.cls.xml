<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="cAdmin.WebSocket">
<IncludeCode>%ZEN.Utils</IncludeCode>
<Super>%CSP.WebSocket</Super>
<TimeCreated>63236,45246.272996</TimeCreated>

<Property name="Sensors">
<Type>cAdmin.data.Sensors</Type>
</Property>

<Parameter name="Timeout">
<Description>
How long to wait for user when connection established</Description>
<Default>120</Default>
</Parameter>

<Parameter name="authorizationTimeout">
<Description>
How long to wait for authorization key when connection established</Description>
<Default>5</Default>
</Parameter>

<Method name="Server">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if ($$$ISOK(..RequireAuthorization() && $$$ISOK(..RequireResource()))) 
	{		
   		For  
   		{
      		Set data=..Read(, .status, ..#Timeout)
			If $$$ISERR(status) 
			{
				If $$$GETERRORCODE(status) = $$$CSPWebSocketClosed 
				{
					Quit
				}
				If $$$GETERRORCODE(status) = $$$CSPWebSocketTimeout 
				{
     	   	     	Set status=..Write("Server timed-out at "_$Horolog)
     	   		}
      		} else 
      		{
         		do ..InitSensors()
     		    do ..ChooseAction(data)
     	 	}
   		}	
	} else {
		Set status=..EndServer()
   		Quit $$$OK					
	}
]]></Implementation>
</Method>

<Method name="InitSensors">
<Implementation><![CDATA[
	set st=$$$OK
	try	{
		if ('..Sensors) { 
			set ..Sensors=##class(cAdmin.data.Sensors).%New()
		}
	} catch ex {
		set st=ex.AsStatus()
	}
]]></Implementation>
</Method>

<Method name="ChooseAction">
<FormalSpec>data:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set action=$p(data,":",1) 
	set params=$p(data,":",2,*)
	If action="exit" {do ..EndServer()}
	ElseIf action="test" {do ..TestLoop()}
	ElseIf action="DB" {do ..DBStats()}
	ElseIf action="sensors" {do ..Sensors(params)}
	ElseIf action="process" {do ..Process(params)}
	ElseIf (action [ "cconsole") {do ..Cconsole(action,params)}
	Else { 
		do ..Write(data_" from server")
	}
   	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Sensors">
<FormalSpec>sensorslist:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if sensorslist="" 
	{
		do ..Write(##class(%ZEN.Auxiliary.jsonProvider).%WriteJSONFromObject(,$THIS.Sensors,,,,"aeloqtuw"))
		//set sensorslist="CPU,RandomNumber,LockTable,CSPGatewayLatency,SMH,Increment,JournalSpace,Uptime,LicenseStatus,LicenseExpirationDate,LicenseInvalidReason"
	} else {
		set sensors=$listfromstring(sensorslist,",")
		for i=1:1:$LISTLENGTH(sensors) 
		{
			try {
				//set value=$METHOD($THIS,"Get"_$list(sensors,i))
				set value=$PROPERTY($THIS.Sensors,$list(sensors,i))
			} catch ex {
				do ..Write(ex.AsStatus())
				set value="NaN"
			}
			set $list(values,i)=value
		}
		set JSON=##class(%ZEN.Auxiliary.jsonProvider).%ArrayToJSON(.sensors,.values)
	    do ..Write($e(JSON,1,*-1)) // no need to write status
	}
    quit $$$OK
]]></Implementation>
</Method>

<Method name="DBStats">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	do ..Write(..Sensors.DBStats())
]]></Implementation>
</Method>

<Method name="Cconsole">
<FormalSpec>action:%String,params:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if action = "cconsole-fulltextsearch"
	{
		set JSON = ##class(cAdmin.data.cconsolelog).FullTextSearch(params)
		do ..Write($e(JSON,1,*-1))
	}
	
	if action = "cconsole-filterdate"
	{
		set JSON = ##class(cAdmin.data.cconsolelog).DateTimeSearch(params)
		do ..Write($e(JSON,1,*-1))
	}
    quit $$$OK
]]></Implementation>
</Method>

<Method name="Process">
<FormalSpec>args:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if args="List" {
		do ..Write(##class(cAdmin.data.Process).ListProcess())
	} else {
		do $CLASSMETHOD("cAdmin.data.Process",$p(args,",",1)_"Process",$p(args,",",2,*))
	}
    quit $$$OK
]]></Implementation>
</Method>

<Method name="TestLoop">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//
	while (1) {
		//set test=$g(^test("test"),"0")
		if ^test("test")'="0" 
		{
			do ..Write("{ ""alert"" : """_^test("test")_""" }")
		}
		hang 10
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="RequireAuthorization">
<Description>
This method holds process and expects only one package from
the client - it includes authorization key.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set authPair = ..Read(,.status,..#authorizationTimeout) // wait for package
	set st = '$$$OK
	set obj = ##class(%ZEN.proxyObject).%New()
	set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(authPair,,.obj,1)
	quit:$$$ISERR(st) st
	set loginStatus = ##class(%SYSTEM.Security).Login(obj.User,obj.Password) // login user
	quit loginStatus
]]></Implementation>
</Method>

<Method name="RequireResource">
<Description>
This method holds process and expects only one package from
the client - it includes authorization key.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit $SYSTEM.Security.Check("%Development","USE")
]]></Implementation>
</Method>

<Method name="IterateProperty">
<Description>
Reference</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set obj = ##class(%ZEN.proxyObject).%New()
 
	set obj.Name="123"
	set obj.SurName="123"
	set propName=$o(obj.%data(""))
	w propName
	w $o(obj.%data(propName))
]]></Implementation>
</Method>
</Class>
</Export>
