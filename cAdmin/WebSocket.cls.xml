<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="cAdmin.WebSocket">
<Description>
Web socket class. Manages all comunication with the client.</Description>
<Super>%CSP.WebSocket</Super>
<TimeCreated>63236,45246.272996</TimeCreated>

<Property name="Sensors">
<Type>cAdmin.data.Sensors</Type>
</Property>

<Parameter name="Timeout">
<Description>
How long to wait for user when connection established</Description>
<Default>3600</Default>
</Parameter>

<Parameter name="AuthorizationTimeout">
<Description>
How long to wait for authorization key when connection established</Description>
<Default>5</Default>
</Parameter>

<Parameter name="Resource">
<Description>
Resource name, required to access this websocket</Description>
<Default>%Development</Default>
</Parameter>

<Method name="Server">
<Description><![CDATA[
Main method. <br>
Authenticates user, checks that he has required resource.
If all goes well, initialises sensors and forwards users' input to Choose Action]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if ($$$ISOK(..RequireAuthorization() && $$$ISOK(..RequireResource()))) 
	{		
   		For  
   		{
      		Set data=..Read(, .status, ..#Timeout)
			If $$$ISERR(status) 
			{
				If $$$GETERRORCODE(status) = $$$CSPWebSocketClosed 
				{
					Quit
				}
				If $$$GETERRORCODE(status) = $$$CSPWebSocketTimeout 
				{
     	   	     	Set status=..Write("Server timed-out at "_$ZTIMESTAMP)
     	   		}
      		} else 
      		{
         		do ..InitSensors()
     		    do ..ChooseAction(data)
     	 	}
   		}	
	} else {
		Set status=..EndServer()
   		Quit $$$OK					
	}
]]></Implementation>
</Method>

<Method name="RequireAuthorization">
<Description><![CDATA[
Holds process and expects only one package from the client,<br>
containing Username and password in JSON format. <br>
Example : {User:"_SYSTEM",Password:"sys"}]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set authPair = ..Read(,.status,..#AuthorizationTimeout) // wait for package
	set st = '$$$OK
	set obj = ##class(%ZEN.proxyObject).%New()
	set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(authPair,,.obj,1)
	quit:$$$ISERR(st) st
	set loginStatus = ##class(%SYSTEM.Security).Login(obj.User,obj.Password) // login user
	quit loginStatus
]]></Implementation>
</Method>

<Method name="RequireResource">
<Description>
Checks, if User (as defined in RequireAuthorization method) has required resourse</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit $SYSTEM.Security.Check(..#Resource,"USE")
]]></Implementation>
</Method>

<Method name="InitSensors">
<Description>
Create new Sensors object</Description>
<Implementation><![CDATA[
	set st=$$$OK
	try	{
		if ('..Sensors) { 
			set ..Sensors=##class(cAdmin.data.Sensors).%New()
		}
	} catch ex {
		set st=ex.AsStatus()
	}
]]></Implementation>
</Method>

<Method name="ChooseAction">
<Description><![CDATA[
Chooses what action to take, based on user input.<br>
Expected input:<br>
&lt;action&gt;<br>
&lt;action&gt;:&lt;argument1,argument2,...,argumentN&gt;<br>]]></Description>
<FormalSpec>data:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set action=$p(data,":",1) 
	set params=$p(data,":",2,*)
	set action=$ZCONVERT(action,"l")
	
	If action="exit" {do ..EndServer()}
	ElseIf action="devtools" {do ..DevTools(params)}
	ElseIf action="db" {do ..DBStats()}
	ElseIf action="sensors" {do ..Sensors(params)}
	ElseIf action="process" {do ..Process($p(params,",",1),$p(params,",",2,*))}
	ElseIf (action [ "cconsole") {do ..Cconsole(action,params)}
	Else { 
		do ..Write(data_" from server")
	}
   	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Sensors">
<Description><![CDATA[
Sends client a JSON encoded readins of sensors<br>
<b>sensorslist</b> - comma separated list of sensors<br>
Sends all sensors data if list is an empty string<br>
Example: CPU,LockTable,CSPGatewayLatency]]></Description>
<FormalSpec>sensorslist:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if sensorslist="" 
	{
		do ..Write(##class(%ZEN.Auxiliary.jsonProvider).%WriteJSONFromObject(,$THIS.Sensors,,,,"aeloqtuw"))
		//set sensorslist="CPU,LockTable,CSPGatewayLatency,SMH,JournalSpace,Uptime,LicenseStatus,LicenseExpirationDate,LicenseInvalidReason"
	} else {
		set sensors=$listfromstring(sensorslist,",")
		for i=1:1:$LISTLENGTH(sensors) 
		{
			try {
				//set value=$METHOD($THIS,"Get"_$list(sensors,i))
				set value=$PROPERTY($THIS.Sensors,$list(sensors,i))
			} catch ex {
				do ..Write(ex.AsStatus())
				set value="NaN"
			}
			set $list(values,i)=value
		}
		set JSON=##class(%ZEN.Auxiliary.jsonProvider).%ArrayToJSON(.sensors,.values)
	    do ..Write($e(JSON,1,*-1)) // no need to write status
	}
    quit $$$OK
]]></Implementation>
</Method>

<Method name="DBStats">
<Description>
Writes Database information in JSON format</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	do ..Write(..Sensors.DBStats())
]]></Implementation>
</Method>

<Method name="Cconsole">
<FormalSpec>action:%String,params:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if action = "cconsole-fulltextsearch"
	{
		set JSON = ##class(cAdmin.data.CconsoleLog).FullTextSearch(params)
		do ..Write($e(JSON,1,*-1))
	}
	elseif action = "cconsole-filterdate"
	{
		set JSON = ##class(cAdmin.data.CconsoleLog).DateTimeSearch(params)
		do ..Write($e(JSON,1,*-1))
	}
	elseif action="cconsole-alert"
	{
		do ##class(cAdmin.data.CconsoleLog).Update()
		set lastid = ##class(cAdmin.data.CconsoleLog).GetLastId()
		while (1)
		{
			hang 10
			do ##class(cAdmin.data.CconsoleLog).Update()
			set newlastid = ##class(cAdmin.data.CconsoleLog).GetLastId()
			if newlastid>lastid
			{

				set JSON = ##class(cAdmin.data.CconsoleLog).GetLast(newlastid-lastid)
				do ..Write($e(JSON,1,*-1))
				set lastid=newlastid
			}
		}
	}
    quit $$$OK
]]></Implementation>
</Method>

<Method name="Process">
<Description><![CDATA[
Various actions with processes.<br>
<b>action]]></Description>
<FormalSpec>action:%String,id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if action="List" {
		do ..Write(##class(cAdmin.data.Process).ListProcess())
	} else {
		do $CLASSMETHOD("cAdmin.data.Process",action_"Process",id)
	}
    quit $$$OK
]]></Implementation>
</Method>

<Method name="DevTools">
<Description>
Various developement tools.</Description>
<FormalSpec>args:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if args="loop" {
		do ..TestLoop()
		quit $$$OK
	}
	
	if args="" 
	{
		set args="RandomNumber,Increment"
	} else {
		set sensors=$listfromstring(args,",")
		for i=1:1:$LISTLENGTH(sensors) 
		{
			try {
				set value=$CLASSMETHOD("cAdmin.data.DevTools",$list(sensors,i))
		
			} catch ex {
				do ..Write(ex.AsStatus())
				set value="NaN"
			}
			set $list(values,i)=value
		}
		set JSON=##class(%ZEN.Auxiliary.jsonProvider).%ArrayToJSON(.sensors,.values)
	    do ..Write($e(JSON,1,*-1)) // no need to write status
	}
    quit $$$OK
]]></Implementation>
</Method>

<Method name="TestLoop">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	while (1) {
		set JSON = ##class(cAdmin.data.CconsoleLog).GetRandom()
		do ..Write($e(JSON,1,*-1))		
		hang 10
	}
	quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
